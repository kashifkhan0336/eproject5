// This file is automatically generated by Keystone, do not modify it manually.
// Modify your Keystone config when you want to change this.

datasource sqlite {
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
  provider          = "sqlite"
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                                 String               @id @default(cuid())
  name                               String               @default("")
  email                              String               @unique @default("")
  password                           String
  role                               String
  createdAt                          DateTime?            @default(now())
  from_Housekeeping_staff            Housekeeping[]       @relation("Housekeeping_staff")
  from_MaintenanceRequest_reportedBy MaintenanceRequest[] @relation("MaintenanceRequest_reportedBy")
}

model Guest {
  id                        String           @id @default(cuid())
  name                      String           @default("")
  email                     String           @unique @default("")
  contactNumber             String           @default("")
  preferences               String           @default("")
  createdAt                 DateTime?        @default(now())
  feedback                  Feedback[]       @relation("Feedback_guest")
  from_Booking_guest        Booking[]        @relation("Booking_guest")
  from_ServiceRequest_guest ServiceRequest[] @relation("ServiceRequest_guest")
  from_SupportRequest_guest SupportRequest[] @relation("SupportRequest_guest")
}

model Room {
  id                           String               @id @default(cuid())
  roomNumber                   Int                  @unique
  roomType                     String
  pricePerNight                Int
  status                       String?
  roomImage_id                 String?
  roomImage_filesize           Int?
  roomImage_width              Int?
  roomImage_height             Int?
  roomImage_extension          String?
  createdAt                    DateTime?            @default(now())
  from_Booking_room            Booking[]            @relation("Booking_room")
  from_Housekeeping_room       Housekeeping[]       @relation("Housekeeping_room")
  from_MaintenanceRequest_room MaintenanceRequest[] @relation("MaintenanceRequest_room")
}

model Booking {
  id           String    @id @default(cuid())
  guest        Guest?    @relation("Booking_guest", fields: [guestId], references: [id])
  guestId      String?   @map("guest")
  room         Room?     @relation("Booking_room", fields: [roomId], references: [id])
  roomId       String?   @map("room")
  services     Service[] @relation("Booking_services")
  checkInDate  String
  checkOutDate String
  expenses     Expense[] @relation("Expense_booking")
  status       String    @default("booked")
  totalAmount  Int?
  createdAt    DateTime? @default(now())

  @@index([guestId])
  @@index([roomId])
}

model Expense {
  id          String    @id @default(cuid())
  description String    @default("")
  amount      Int
  booking     Booking?  @relation("Expense_booking", fields: [bookingId], references: [id])
  bookingId   String?   @map("booking")
  createdAt   DateTime? @default(now())

  @@index([bookingId])
}

model Service {
  id                          String           @id @default(cuid())
  serviceName                 String           @default("")
  serviceType                 String
  price                       Int
  duration                    Int?
  description                 String           @default("")
  isRecurring                 Boolean          @default(false)
  availability                String?          @default("available")
  createdAt                   DateTime?        @default(now())
  from_Booking_services       Booking[]        @relation("Booking_services")
  from_ServiceRequest_service ServiceRequest[] @relation("ServiceRequest_service")
}

model Housekeeping {
  id        String    @id @default(cuid())
  room      Room?     @relation("Housekeeping_room", fields: [roomId], references: [id])
  roomId    String?   @map("room")
  staff     User?     @relation("Housekeeping_staff", fields: [staffId], references: [id])
  staffId   String?   @map("staff")
  status    String?   @default("pending")
  comments  String    @default("")
  createdAt DateTime? @default(now())

  @@index([roomId])
  @@index([staffId])
}

model MaintenanceRequest {
  id           String    @id @default(cuid())
  room         Room?     @relation("MaintenanceRequest_room", fields: [roomId], references: [id])
  roomId       String?   @map("room")
  reportedBy   User?     @relation("MaintenanceRequest_reportedBy", fields: [reportedById], references: [id])
  reportedById String?   @map("reportedBy")
  description  String    @default("")
  status       String?   @default("reported")
  createdAt    DateTime? @default(now())

  @@index([roomId])
  @@index([reportedById])
}

model ServiceRequest {
  id        String    @id @default(cuid())
  guest     Guest?    @relation("ServiceRequest_guest", fields: [guestId], references: [id])
  guestId   String?   @map("guest")
  service   Service?  @relation("ServiceRequest_service", fields: [serviceId], references: [id])
  serviceId String?   @map("service")
  status    String?   @default("requested")
  comments  String    @default("")
  createdAt DateTime? @default(now())

  @@index([guestId])
  @@index([serviceId])
}

model Feedback {
  id        String    @id @default(cuid())
  guest     Guest?    @relation("Feedback_guest", fields: [guestId], references: [id])
  guestId   String?   @map("guest")
  rating    Int
  comments  String    @default("")
  createdAt DateTime? @default(now())

  @@index([guestId])
}

model SupportRequest {
  id          String    @id @default(cuid())
  guest       Guest?    @relation("SupportRequest_guest", fields: [guestId], references: [id])
  guestId     String?   @map("guest")
  subject     String    @default("")
  description String    @default("")
  status      String?   @default("open")
  createdAt   DateTime? @default(now())

  @@index([guestId])
}
