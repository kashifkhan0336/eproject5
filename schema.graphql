# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type User {
  id: ID!
  name: String
  email: String
  password: PasswordState
  role: String
  createdAt: DateTime
}

type PasswordState {
  isSet: Boolean!
}

scalar DateTime @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input UserWhereUniqueInput {
  id: ID
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  name: StringFilter
  email: StringFilter
  role: StringFilter
  createdAt: DateTimeNullableFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input UserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
  role: OrderDirection
  createdAt: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input UserUpdateInput {
  name: String
  email: String
  password: String
  role: String
  createdAt: DateTime
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  name: String
  email: String
  password: String
  role: String
  createdAt: DateTime
}

type Guest {
  id: ID!
  name: String
  email: String
  contactNumber: String
  preferences: String
  createdAt: DateTime
  feedback(where: FeedbackWhereInput! = {}, orderBy: [FeedbackOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: FeedbackWhereUniqueInput): [Feedback!]
  feedbackCount(where: FeedbackWhereInput! = {}): Int
}

input GuestWhereUniqueInput {
  id: ID
  email: String
}

input GuestWhereInput {
  AND: [GuestWhereInput!]
  OR: [GuestWhereInput!]
  NOT: [GuestWhereInput!]
  id: IDFilter
  name: StringFilter
  email: StringFilter
  contactNumber: StringFilter
  preferences: StringFilter
  createdAt: DateTimeNullableFilter
  feedback: FeedbackManyRelationFilter
}

input FeedbackManyRelationFilter {
  every: FeedbackWhereInput
  some: FeedbackWhereInput
  none: FeedbackWhereInput
}

input GuestOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
  contactNumber: OrderDirection
  preferences: OrderDirection
  createdAt: OrderDirection
}

input GuestUpdateInput {
  name: String
  email: String
  contactNumber: String
  preferences: String
  createdAt: DateTime
  feedback: FeedbackRelateToManyForUpdateInput
}

input FeedbackRelateToManyForUpdateInput {
  disconnect: [FeedbackWhereUniqueInput!]
  set: [FeedbackWhereUniqueInput!]
  create: [FeedbackCreateInput!]
  connect: [FeedbackWhereUniqueInput!]
}

input GuestUpdateArgs {
  where: GuestWhereUniqueInput!
  data: GuestUpdateInput!
}

input GuestCreateInput {
  name: String
  email: String
  contactNumber: String
  preferences: String
  createdAt: DateTime
  feedback: FeedbackRelateToManyForCreateInput
}

input FeedbackRelateToManyForCreateInput {
  create: [FeedbackCreateInput!]
  connect: [FeedbackWhereUniqueInput!]
}

type Room {
  id: ID!
  roomNumber: Int
  roomType: String
  pricePerNight: Int
  status: String
  roomImage: ImageFieldOutput
  createdAt: DateTime
}

type ImageFieldOutput {
  id: ID!
  filesize: Int!
  width: Int!
  height: Int!
  extension: ImageExtension!
  url: String!
}

enum ImageExtension {
  jpg
  png
  webp
  gif
}

input RoomWhereUniqueInput {
  id: ID
  roomNumber: Int
}

input RoomWhereInput {
  AND: [RoomWhereInput!]
  OR: [RoomWhereInput!]
  NOT: [RoomWhereInput!]
  id: IDFilter
  roomNumber: IntFilter
  roomType: StringFilter
  pricePerNight: IntFilter
  status: StringNullableFilter
  createdAt: DateTimeNullableFilter
}

input IntFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntFilter
}

input StringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: StringNullableFilter
}

input RoomOrderByInput {
  id: OrderDirection
  roomNumber: OrderDirection
  roomType: OrderDirection
  pricePerNight: OrderDirection
  status: OrderDirection
  createdAt: OrderDirection
}

input RoomUpdateInput {
  roomNumber: Int
  roomType: String
  pricePerNight: Int
  status: String
  roomImage: ImageFieldInput
  createdAt: DateTime
}

input ImageFieldInput {
  upload: Upload!
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

input RoomUpdateArgs {
  where: RoomWhereUniqueInput!
  data: RoomUpdateInput!
}

input RoomCreateInput {
  roomNumber: Int
  roomType: String
  pricePerNight: Int
  status: String
  roomImage: ImageFieldInput
  createdAt: DateTime
}

type Booking {
  id: ID!
  guest: Guest
  room: Room
  services(where: ServiceWhereInput! = {}, orderBy: [ServiceOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ServiceWhereUniqueInput): [Service!]
  servicesCount(where: ServiceWhereInput! = {}): Int
  checkInDate: CalendarDay
  checkOutDate: CalendarDay
  expenses(where: ExpenseWhereInput! = {}, orderBy: [ExpenseOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ExpenseWhereUniqueInput): [Expense!]
  expensesCount(where: ExpenseWhereInput! = {}): Int
  status: String
  totalAmount: Int
  createdAt: DateTime
}

scalar CalendarDay @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input BookingWhereUniqueInput {
  id: ID
}

input BookingWhereInput {
  AND: [BookingWhereInput!]
  OR: [BookingWhereInput!]
  NOT: [BookingWhereInput!]
  id: IDFilter
  guest: GuestWhereInput
  room: RoomWhereInput
  services: ServiceManyRelationFilter
  checkInDate: CalendarDayFilter
  checkOutDate: CalendarDayFilter
  expenses: ExpenseManyRelationFilter
  status: StringFilter
  totalAmount: IntNullableFilter
  createdAt: DateTimeNullableFilter
}

input ServiceManyRelationFilter {
  every: ServiceWhereInput
  some: ServiceWhereInput
  none: ServiceWhereInput
}

input CalendarDayFilter {
  equals: CalendarDay
  in: [CalendarDay!]
  notIn: [CalendarDay!]
  lt: CalendarDay
  lte: CalendarDay
  gt: CalendarDay
  gte: CalendarDay
  not: CalendarDayFilter
}

input ExpenseManyRelationFilter {
  every: ExpenseWhereInput
  some: ExpenseWhereInput
  none: ExpenseWhereInput
}

input IntNullableFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntNullableFilter
}

input BookingOrderByInput {
  id: OrderDirection
  checkInDate: OrderDirection
  checkOutDate: OrderDirection
  status: OrderDirection
  totalAmount: OrderDirection
  createdAt: OrderDirection
}

input BookingUpdateInput {
  guest: GuestRelateToOneForUpdateInput
  room: RoomRelateToOneForUpdateInput
  services: ServiceRelateToManyForUpdateInput
  checkInDate: CalendarDay
  checkOutDate: CalendarDay
  expenses: ExpenseRelateToManyForUpdateInput
  status: String
  totalAmount: Int
  createdAt: DateTime
}

input GuestRelateToOneForUpdateInput {
  create: GuestCreateInput
  connect: GuestWhereUniqueInput
  disconnect: Boolean
}

input RoomRelateToOneForUpdateInput {
  create: RoomCreateInput
  connect: RoomWhereUniqueInput
  disconnect: Boolean
}

input ServiceRelateToManyForUpdateInput {
  disconnect: [ServiceWhereUniqueInput!]
  set: [ServiceWhereUniqueInput!]
  create: [ServiceCreateInput!]
  connect: [ServiceWhereUniqueInput!]
}

input ExpenseRelateToManyForUpdateInput {
  disconnect: [ExpenseWhereUniqueInput!]
  set: [ExpenseWhereUniqueInput!]
  create: [ExpenseCreateInput!]
  connect: [ExpenseWhereUniqueInput!]
}

input BookingUpdateArgs {
  where: BookingWhereUniqueInput!
  data: BookingUpdateInput!
}

input BookingCreateInput {
  guest: GuestRelateToOneForCreateInput
  room: RoomRelateToOneForCreateInput
  services: ServiceRelateToManyForCreateInput
  checkInDate: CalendarDay
  checkOutDate: CalendarDay
  expenses: ExpenseRelateToManyForCreateInput
  status: String
  totalAmount: Int
  createdAt: DateTime
}

input GuestRelateToOneForCreateInput {
  create: GuestCreateInput
  connect: GuestWhereUniqueInput
}

input RoomRelateToOneForCreateInput {
  create: RoomCreateInput
  connect: RoomWhereUniqueInput
}

input ServiceRelateToManyForCreateInput {
  create: [ServiceCreateInput!]
  connect: [ServiceWhereUniqueInput!]
}

input ExpenseRelateToManyForCreateInput {
  create: [ExpenseCreateInput!]
  connect: [ExpenseWhereUniqueInput!]
}

type Expense {
  id: ID!
  description: String
  amount: Int
  booking: Booking
  createdAt: DateTime
}

input ExpenseWhereUniqueInput {
  id: ID
}

input ExpenseWhereInput {
  AND: [ExpenseWhereInput!]
  OR: [ExpenseWhereInput!]
  NOT: [ExpenseWhereInput!]
  id: IDFilter
  description: StringFilter
  amount: IntFilter
  booking: BookingWhereInput
  createdAt: DateTimeNullableFilter
}

input ExpenseOrderByInput {
  id: OrderDirection
  description: OrderDirection
  amount: OrderDirection
  createdAt: OrderDirection
}

input ExpenseUpdateInput {
  description: String
  amount: Int
  booking: BookingRelateToOneForUpdateInput
  createdAt: DateTime
}

input BookingRelateToOneForUpdateInput {
  create: BookingCreateInput
  connect: BookingWhereUniqueInput
  disconnect: Boolean
}

input ExpenseUpdateArgs {
  where: ExpenseWhereUniqueInput!
  data: ExpenseUpdateInput!
}

input ExpenseCreateInput {
  description: String
  amount: Int
  booking: BookingRelateToOneForCreateInput
  createdAt: DateTime
}

input BookingRelateToOneForCreateInput {
  create: BookingCreateInput
  connect: BookingWhereUniqueInput
}

type Service {
  id: ID!
  serviceName: String
  serviceType: String
  price: Int
  duration: Int
  description: String
  isRecurring: Boolean
  availability: String
  createdAt: DateTime
}

input ServiceWhereUniqueInput {
  id: ID
}

input ServiceWhereInput {
  AND: [ServiceWhereInput!]
  OR: [ServiceWhereInput!]
  NOT: [ServiceWhereInput!]
  id: IDFilter
  serviceName: StringFilter
  serviceType: StringFilter
  price: IntFilter
  duration: IntNullableFilter
  description: StringFilter
  isRecurring: BooleanFilter
  availability: StringNullableFilter
  createdAt: DateTimeNullableFilter
}

input BooleanFilter {
  equals: Boolean
  not: BooleanFilter
}

input ServiceOrderByInput {
  id: OrderDirection
  serviceName: OrderDirection
  serviceType: OrderDirection
  price: OrderDirection
  duration: OrderDirection
  description: OrderDirection
  isRecurring: OrderDirection
  availability: OrderDirection
  createdAt: OrderDirection
}

input ServiceUpdateInput {
  serviceName: String
  serviceType: String
  price: Int
  duration: Int
  description: String
  isRecurring: Boolean
  availability: String
  createdAt: DateTime
}

input ServiceUpdateArgs {
  where: ServiceWhereUniqueInput!
  data: ServiceUpdateInput!
}

input ServiceCreateInput {
  serviceName: String
  serviceType: String
  price: Int
  duration: Int
  description: String
  isRecurring: Boolean
  availability: String
  createdAt: DateTime
}

type Housekeeping {
  id: ID!
  room: Room
  staff: User
  status: String
  comments: String
  createdAt: DateTime
}

input HousekeepingWhereUniqueInput {
  id: ID
}

input HousekeepingWhereInput {
  AND: [HousekeepingWhereInput!]
  OR: [HousekeepingWhereInput!]
  NOT: [HousekeepingWhereInput!]
  id: IDFilter
  room: RoomWhereInput
  staff: UserWhereInput
  status: StringNullableFilter
  comments: StringFilter
  createdAt: DateTimeNullableFilter
}

input HousekeepingOrderByInput {
  id: OrderDirection
  status: OrderDirection
  comments: OrderDirection
  createdAt: OrderDirection
}

input HousekeepingUpdateInput {
  room: RoomRelateToOneForUpdateInput
  staff: UserRelateToOneForUpdateInput
  status: String
  comments: String
  createdAt: DateTime
}

input UserRelateToOneForUpdateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
}

input HousekeepingUpdateArgs {
  where: HousekeepingWhereUniqueInput!
  data: HousekeepingUpdateInput!
}

input HousekeepingCreateInput {
  room: RoomRelateToOneForCreateInput
  staff: UserRelateToOneForCreateInput
  status: String
  comments: String
  createdAt: DateTime
}

input UserRelateToOneForCreateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

type MaintenanceRequest {
  id: ID!
  room: Room
  reportedBy: User
  description: String
  status: String
  createdAt: DateTime
}

input MaintenanceRequestWhereUniqueInput {
  id: ID
}

input MaintenanceRequestWhereInput {
  AND: [MaintenanceRequestWhereInput!]
  OR: [MaintenanceRequestWhereInput!]
  NOT: [MaintenanceRequestWhereInput!]
  id: IDFilter
  room: RoomWhereInput
  reportedBy: UserWhereInput
  description: StringFilter
  status: StringNullableFilter
  createdAt: DateTimeNullableFilter
}

input MaintenanceRequestOrderByInput {
  id: OrderDirection
  description: OrderDirection
  status: OrderDirection
  createdAt: OrderDirection
}

input MaintenanceRequestUpdateInput {
  room: RoomRelateToOneForUpdateInput
  reportedBy: UserRelateToOneForUpdateInput
  description: String
  status: String
  createdAt: DateTime
}

input MaintenanceRequestUpdateArgs {
  where: MaintenanceRequestWhereUniqueInput!
  data: MaintenanceRequestUpdateInput!
}

input MaintenanceRequestCreateInput {
  room: RoomRelateToOneForCreateInput
  reportedBy: UserRelateToOneForCreateInput
  description: String
  status: String
  createdAt: DateTime
}

type ServiceRequest {
  id: ID!
  guest: Guest
  service: Service
  status: String
  comments: String
  createdAt: DateTime
}

input ServiceRequestWhereUniqueInput {
  id: ID
}

input ServiceRequestWhereInput {
  AND: [ServiceRequestWhereInput!]
  OR: [ServiceRequestWhereInput!]
  NOT: [ServiceRequestWhereInput!]
  id: IDFilter
  guest: GuestWhereInput
  service: ServiceWhereInput
  status: StringNullableFilter
  comments: StringFilter
  createdAt: DateTimeNullableFilter
}

input ServiceRequestOrderByInput {
  id: OrderDirection
  status: OrderDirection
  comments: OrderDirection
  createdAt: OrderDirection
}

input ServiceRequestUpdateInput {
  guest: GuestRelateToOneForUpdateInput
  service: ServiceRelateToOneForUpdateInput
  status: String
  comments: String
  createdAt: DateTime
}

input ServiceRelateToOneForUpdateInput {
  create: ServiceCreateInput
  connect: ServiceWhereUniqueInput
  disconnect: Boolean
}

input ServiceRequestUpdateArgs {
  where: ServiceRequestWhereUniqueInput!
  data: ServiceRequestUpdateInput!
}

input ServiceRequestCreateInput {
  guest: GuestRelateToOneForCreateInput
  service: ServiceRelateToOneForCreateInput
  status: String
  comments: String
  createdAt: DateTime
}

input ServiceRelateToOneForCreateInput {
  create: ServiceCreateInput
  connect: ServiceWhereUniqueInput
}

type Feedback {
  id: ID!
  guest: Guest
  rating: Int
  comments: String
  createdAt: DateTime
}

input FeedbackWhereUniqueInput {
  id: ID
}

input FeedbackWhereInput {
  AND: [FeedbackWhereInput!]
  OR: [FeedbackWhereInput!]
  NOT: [FeedbackWhereInput!]
  id: IDFilter
  guest: GuestWhereInput
  rating: IntFilter
  comments: StringFilter
  createdAt: DateTimeNullableFilter
}

input FeedbackOrderByInput {
  id: OrderDirection
  rating: OrderDirection
  comments: OrderDirection
  createdAt: OrderDirection
}

input FeedbackUpdateInput {
  guest: GuestRelateToOneForUpdateInput
  rating: Int
  comments: String
  createdAt: DateTime
}

input FeedbackUpdateArgs {
  where: FeedbackWhereUniqueInput!
  data: FeedbackUpdateInput!
}

input FeedbackCreateInput {
  guest: GuestRelateToOneForCreateInput
  rating: Int
  comments: String
  createdAt: DateTime
}

type SupportRequest {
  id: ID!
  guest: Guest
  subject: String
  description: String
  status: String
  createdAt: DateTime
}

input SupportRequestWhereUniqueInput {
  id: ID
}

input SupportRequestWhereInput {
  AND: [SupportRequestWhereInput!]
  OR: [SupportRequestWhereInput!]
  NOT: [SupportRequestWhereInput!]
  id: IDFilter
  guest: GuestWhereInput
  subject: StringFilter
  description: StringFilter
  status: StringNullableFilter
  createdAt: DateTimeNullableFilter
}

input SupportRequestOrderByInput {
  id: OrderDirection
  subject: OrderDirection
  description: OrderDirection
  status: OrderDirection
  createdAt: OrderDirection
}

input SupportRequestUpdateInput {
  guest: GuestRelateToOneForUpdateInput
  subject: String
  description: String
  status: String
  createdAt: DateTime
}

input SupportRequestUpdateArgs {
  where: SupportRequestWhereUniqueInput!
  data: SupportRequestUpdateInput!
}

input SupportRequestCreateInput {
  guest: GuestRelateToOneForCreateInput
  subject: String
  description: String
  status: String
  createdAt: DateTime
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Mutation {
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createGuest(data: GuestCreateInput!): Guest
  createGuests(data: [GuestCreateInput!]!): [Guest]
  updateGuest(where: GuestWhereUniqueInput!, data: GuestUpdateInput!): Guest
  updateGuests(data: [GuestUpdateArgs!]!): [Guest]
  deleteGuest(where: GuestWhereUniqueInput!): Guest
  deleteGuests(where: [GuestWhereUniqueInput!]!): [Guest]
  createRoom(data: RoomCreateInput!): Room
  createRooms(data: [RoomCreateInput!]!): [Room]
  updateRoom(where: RoomWhereUniqueInput!, data: RoomUpdateInput!): Room
  updateRooms(data: [RoomUpdateArgs!]!): [Room]
  deleteRoom(where: RoomWhereUniqueInput!): Room
  deleteRooms(where: [RoomWhereUniqueInput!]!): [Room]
  createBooking(data: BookingCreateInput!): Booking
  createBookings(data: [BookingCreateInput!]!): [Booking]
  updateBooking(where: BookingWhereUniqueInput!, data: BookingUpdateInput!): Booking
  updateBookings(data: [BookingUpdateArgs!]!): [Booking]
  deleteBooking(where: BookingWhereUniqueInput!): Booking
  deleteBookings(where: [BookingWhereUniqueInput!]!): [Booking]
  createExpense(data: ExpenseCreateInput!): Expense
  createExpenses(data: [ExpenseCreateInput!]!): [Expense]
  updateExpense(where: ExpenseWhereUniqueInput!, data: ExpenseUpdateInput!): Expense
  updateExpenses(data: [ExpenseUpdateArgs!]!): [Expense]
  deleteExpense(where: ExpenseWhereUniqueInput!): Expense
  deleteExpenses(where: [ExpenseWhereUniqueInput!]!): [Expense]
  createService(data: ServiceCreateInput!): Service
  createServices(data: [ServiceCreateInput!]!): [Service]
  updateService(where: ServiceWhereUniqueInput!, data: ServiceUpdateInput!): Service
  updateServices(data: [ServiceUpdateArgs!]!): [Service]
  deleteService(where: ServiceWhereUniqueInput!): Service
  deleteServices(where: [ServiceWhereUniqueInput!]!): [Service]
  createHousekeeping(data: HousekeepingCreateInput!): Housekeeping
  createHousekeepings(data: [HousekeepingCreateInput!]!): [Housekeeping]
  updateHousekeeping(where: HousekeepingWhereUniqueInput!, data: HousekeepingUpdateInput!): Housekeeping
  updateHousekeepings(data: [HousekeepingUpdateArgs!]!): [Housekeeping]
  deleteHousekeeping(where: HousekeepingWhereUniqueInput!): Housekeeping
  deleteHousekeepings(where: [HousekeepingWhereUniqueInput!]!): [Housekeeping]
  createMaintenanceRequest(data: MaintenanceRequestCreateInput!): MaintenanceRequest
  createMaintenanceRequests(data: [MaintenanceRequestCreateInput!]!): [MaintenanceRequest]
  updateMaintenanceRequest(where: MaintenanceRequestWhereUniqueInput!, data: MaintenanceRequestUpdateInput!): MaintenanceRequest
  updateMaintenanceRequests(data: [MaintenanceRequestUpdateArgs!]!): [MaintenanceRequest]
  deleteMaintenanceRequest(where: MaintenanceRequestWhereUniqueInput!): MaintenanceRequest
  deleteMaintenanceRequests(where: [MaintenanceRequestWhereUniqueInput!]!): [MaintenanceRequest]
  createServiceRequest(data: ServiceRequestCreateInput!): ServiceRequest
  createServiceRequests(data: [ServiceRequestCreateInput!]!): [ServiceRequest]
  updateServiceRequest(where: ServiceRequestWhereUniqueInput!, data: ServiceRequestUpdateInput!): ServiceRequest
  updateServiceRequests(data: [ServiceRequestUpdateArgs!]!): [ServiceRequest]
  deleteServiceRequest(where: ServiceRequestWhereUniqueInput!): ServiceRequest
  deleteServiceRequests(where: [ServiceRequestWhereUniqueInput!]!): [ServiceRequest]
  createFeedback(data: FeedbackCreateInput!): Feedback
  createFeedbacks(data: [FeedbackCreateInput!]!): [Feedback]
  updateFeedback(where: FeedbackWhereUniqueInput!, data: FeedbackUpdateInput!): Feedback
  updateFeedbacks(data: [FeedbackUpdateArgs!]!): [Feedback]
  deleteFeedback(where: FeedbackWhereUniqueInput!): Feedback
  deleteFeedbacks(where: [FeedbackWhereUniqueInput!]!): [Feedback]
  createSupportRequest(data: SupportRequestCreateInput!): SupportRequest
  createSupportRequests(data: [SupportRequestCreateInput!]!): [SupportRequest]
  updateSupportRequest(where: SupportRequestWhereUniqueInput!, data: SupportRequestUpdateInput!): SupportRequest
  updateSupportRequests(data: [SupportRequestUpdateArgs!]!): [SupportRequest]
  deleteSupportRequest(where: SupportRequestWhereUniqueInput!): SupportRequest
  deleteSupportRequests(where: [SupportRequestWhereUniqueInput!]!): [SupportRequest]
  endSession: Boolean!
  authenticateUserWithPassword(email: String!, password: String!): UserAuthenticationWithPasswordResult
  createInitialUser(data: CreateInitialUserInput!): UserAuthenticationWithPasswordSuccess!
}

union UserAuthenticationWithPasswordResult = UserAuthenticationWithPasswordSuccess | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialUserInput {
  name: String
  email: String
  password: String
  role: String
}

type Query {
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserWhereUniqueInput): [User!]
  usersCount(where: UserWhereInput! = {}): Int
  guest(where: GuestWhereUniqueInput!): Guest
  guests(where: GuestWhereInput! = {}, orderBy: [GuestOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: GuestWhereUniqueInput): [Guest!]
  guestsCount(where: GuestWhereInput! = {}): Int
  room(where: RoomWhereUniqueInput!): Room
  rooms(where: RoomWhereInput! = {}, orderBy: [RoomOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: RoomWhereUniqueInput): [Room!]
  roomsCount(where: RoomWhereInput! = {}): Int
  booking(where: BookingWhereUniqueInput!): Booking
  bookings(where: BookingWhereInput! = {}, orderBy: [BookingOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: BookingWhereUniqueInput): [Booking!]
  bookingsCount(where: BookingWhereInput! = {}): Int
  expense(where: ExpenseWhereUniqueInput!): Expense
  expenses(where: ExpenseWhereInput! = {}, orderBy: [ExpenseOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ExpenseWhereUniqueInput): [Expense!]
  expensesCount(where: ExpenseWhereInput! = {}): Int
  service(where: ServiceWhereUniqueInput!): Service
  services(where: ServiceWhereInput! = {}, orderBy: [ServiceOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ServiceWhereUniqueInput): [Service!]
  servicesCount(where: ServiceWhereInput! = {}): Int
  housekeeping(where: HousekeepingWhereUniqueInput!): Housekeeping
  housekeepings(where: HousekeepingWhereInput! = {}, orderBy: [HousekeepingOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: HousekeepingWhereUniqueInput): [Housekeeping!]
  housekeepingsCount(where: HousekeepingWhereInput! = {}): Int
  maintenanceRequest(where: MaintenanceRequestWhereUniqueInput!): MaintenanceRequest
  maintenanceRequests(where: MaintenanceRequestWhereInput! = {}, orderBy: [MaintenanceRequestOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: MaintenanceRequestWhereUniqueInput): [MaintenanceRequest!]
  maintenanceRequestsCount(where: MaintenanceRequestWhereInput! = {}): Int
  serviceRequest(where: ServiceRequestWhereUniqueInput!): ServiceRequest
  serviceRequests(where: ServiceRequestWhereInput! = {}, orderBy: [ServiceRequestOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ServiceRequestWhereUniqueInput): [ServiceRequest!]
  serviceRequestsCount(where: ServiceRequestWhereInput! = {}): Int
  feedback(where: FeedbackWhereUniqueInput!): Feedback
  feedbacks(where: FeedbackWhereInput! = {}, orderBy: [FeedbackOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: FeedbackWhereUniqueInput): [Feedback!]
  feedbacksCount(where: FeedbackWhereInput! = {}): Int
  supportRequest(where: SupportRequestWhereUniqueInput!): SupportRequest
  supportRequests(where: SupportRequestWhereInput! = {}, orderBy: [SupportRequestOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: SupportRequestWhereUniqueInput): [SupportRequest!]
  supportRequestsCount(where: SupportRequestWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
}

union AuthenticatedItem = User

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  groups: [KeystoneAdminUIFieldGroupMeta!]!
  graphql: KeystoneAdminUIGraphQL!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
  isSingleton: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  description: String
  isOrderable: Boolean!
  isFilterable: Boolean!
  isNonNull: [KeystoneAdminUIFieldMetaIsNonNull!]
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

enum KeystoneAdminUIFieldMetaIsNonNull {
  read
  create
  update
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
  fieldPosition: KeystoneAdminUIFieldMetaItemViewFieldPosition
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum KeystoneAdminUIFieldMetaItemViewFieldPosition {
  form
  sidebar
}

enum QueryMode {
  default
  insensitive
}

type KeystoneAdminUIFieldGroupMeta {
  label: String!
  description: String
  fields: [KeystoneAdminUIFieldMeta!]!
}

type KeystoneAdminUIGraphQL {
  names: KeystoneAdminUIGraphQLNames!
}

type KeystoneAdminUIGraphQLNames {
  outputTypeName: String!
  whereInputName: String!
  whereUniqueInputName: String!
  createInputName: String!
  createMutationName: String!
  createManyMutationName: String!
  relateToOneForCreateInputName: String!
  relateToManyForCreateInputName: String!
  itemQueryName: String!
  listOrderName: String!
  listQueryCountName: String!
  listQueryName: String!
  updateInputName: String!
  updateMutationName: String!
  updateManyInputName: String!
  updateManyMutationName: String!
  relateToOneForUpdateInputName: String!
  relateToManyForUpdateInputName: String!
  deleteMutationName: String!
  deleteManyMutationName: String!
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
